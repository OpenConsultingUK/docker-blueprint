version: "3"
services:
  # Web service for the Flask application
  web:
    build:
      context: .
      dockerfile: views/flask/web.dockerfile
    ports:
      - 8000:8000
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: '0.50'            # Limit CPU usage for the web service
          memory: 256M            # Limit memory usage for the web service
    environment:
      FASTHOST: api              # Set environment variable for Flask to communicate with the FastAPI service
      FASTPORT: 9001             # Set environment variable for Flask to communicate with the FastAPI service
      HOST: 0.0.0.0              # Listen on all available network interfaces
      PORT: 8000                 # Expose the service on port of choice
    depends_on:
      - api                      # Ensure the FastAPI service starts before the web service
    networks:
      - waptekk2-networks        # Connect to the custom bridge network
    read_only: true              # Set the container to read-only for improved security

  # Nginx service for handling web and API traffic
  nginx:
    build:
      context: .
      dockerfile: views/nginx/nginx.dockerfile
    ports:
      - 80:80                     # Expose port 80 for HTTP traffic
      - 443:443                   # Expose port 443 for HTTPS traffic
    security_opt:
      - no-new-privileges
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
    depends_on:
      - web                       # Ensure the web service starts before the Nginx service
    volumes:
      - ./views/nginx/certs:/etc/nginx/certs   # Mount SSL certificates into the Nginx container
      - ./views/nginx/default.conf:/etc/nginx/conf.d/default.conf   # Mount custom Nginx configuration
    networks:
      - waptekk2-networks        # Connect to the custom bridge network

  # FastAPI service for the API backend
  api:
    build:
      context: .
      dockerfile: views/fast_api/api.dockerfile
    ports:
      - 9001:9001                 # Expose the FastAPI service on port of choice
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
    environment:
      FASTHOST: 0.0.0.0            # Listen on all available network interfaces
      FASTPORT: 9001               # Expose the FastAPI service on port of choice
    volumes:
      - db:/db                     # Mount a volume for persistent database storage
      - data:/data                 # Mount a volume for persistent data storage
    networks:
      - waptekk2-networks          # Connect to the custom bridge network

networks:
  # Define a custom bridge network
  waptekk2-networks:
    driver: bridge

volumes:
  # Define named volumes for persistent data
  data:
    driver: local
  db:
    driver: local